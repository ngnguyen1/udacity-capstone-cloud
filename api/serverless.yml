org: ngnguyen
app: docs-management-app
service: docs-management-service
frameworkVersion: '3'

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  profile : serverless
  runtime: nodejs16.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    PROJECT_NAME: docs-management-app
    DOCS_TABLE: Docs-${self:provider.stage}
    S3_BUCKET_NAME: docs-management-bucket-${self:provider.stage}
    ATTACHMENT_S3_BUCKET: ngnguyen101-docs-images-${self:provider.stage}
    DOCS_CREATED_AT_INDEX: CreatedAtIndex
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: '1.0.0'
        title: Silabs Documentation Management
        description: Serverless API for Docs Management
    models:
      - name: CreateDocRequest
        contentType: "application/json"
        schema: ${file(models/create-doc-model.json)}
      - name: UpdateDocRequest
        contentType: "application/json"
        schema: ${file(models/update-doc-model.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetDocs:
    handler: src/lambda/http/docs/list.handler
    events:
      - http:
          method: get
          path: docs
          cors: true
          reqValidatorName: BodyValidator
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-get-docs-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}/index/${self:provider.environment.DOCS_CREATED_AT_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'
      - Effect: Allow
        Action:
        - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}

  GetDoc:
    handler: src/lambda/http/docs/get.handler
    events:
      - http:
          method: get
          path: docs/{docId}
          cors: true
          reqValidatorName: BodyValidator
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-get-doc-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'

  CreateDoc:
    handler: src/lambda/http/docs/create.handler
    events:
      - http:
          method: post
          path: docs
          cors: true
          reqValidatorName: BodyValidator
          authorizer:
            name: Auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
          request:
            schemas:
              application/json: ${file(models/create-doc-model.json)}
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-create-doc-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'

  UpdateDoc:
    handler: src/lambda/http/docs/update.handler
    events:
      - http:
          method: patch
          path: docs/{docId}
          cors: true
          reqValidatorName: BodyValidator
          authorizer:
            name: Auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
          request:
            schemas:
              application/json: ${file(models/update-doc-model.json)}
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-update-doc-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'

  DeleteDoc:
    handler: src/lambda/http/docs/delete.handler
    events:
      - http:
          method: delete
          path: docs/{docId}
          cors: true
          reqValidatorName: BodyValidator
          authorizer:
            name: Auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-delete-doc-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: docs/{docId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:BatchGetItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}'
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    DocsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: docId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: docId
              KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DOCS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DOCS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
                ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
              MaxAge: 36000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicBucketObjects
              Effect: Allow
              Principal: '*'
              Action: s3:*
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'

    BodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false